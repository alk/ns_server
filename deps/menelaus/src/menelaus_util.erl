%% @author Northscale <info@northscale.com>
%% @copyright 2009 NorthScale, Inc.
%% All rights reserved.

%% @doc Web server for menelaus.

-module(menelaus_util).
-author('Northscale <info@northscale.com>').

-include_lib("eunit/include/eunit.hrl").

-ifdef(EUNIT).
-export([test_under_debugger/0, debugger_apply/2,
         wrap_tests_with_cache_setup/1]).
-endif.

-export([server_header/0,
         redirect_permanently/2,
         redirect_permanently/3,
         reply_json/2,
         reply_json/3,
         parse_json/1,
         parse_boolean/1,
         expect_config/1,
         expect_prop_value/2,
         get_option/2,
         direct_port/1,
         concat_url_path/1,
         validate_email_address/1]).

-export([java_date/0,
         string_hash/1,
         my_seed/1]).

-export([stateful_map/3,
         stateful_takewhile/3,
         low_pass_filter/2,
         caching_result/2]).

-import(simple_cache, [call_simple_cache/2]).

%% External API

server_header() ->
    Versions = ns_info:version(),
    ServerHeader = lists:concat([
                       "NorthScale Server ", proplists:get_value(ns_server, Versions)]),
    [{"Pragma", "no-cache"},
     {"Cache-Control", "no-cache no-store max-age=0"},
     {"Server", ServerHeader}].

redirect_permanently(Path, Req) -> redirect_permanently(Path, Req, []).

%% mostly extracted from mochiweb_request:maybe_redirect/3
redirect_permanently(Path, Req, ExtraHeaders) ->
    %% TODO: support https transparently
    Location = "http://" ++ Req:get_header_value("host") ++ Path,
    LocationBin = list_to_binary(Location),
    Top = <<"<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">"
           "<html><head>"
           "<title>301 Moved Permanently</title>"
           "</head><body>"
           "<h1>Moved Permanently</h1>"
           "<p>The document has moved <a href=\"">>,
    Bottom = <<">here</a>.</p></body></html>\n">>,
    Body = <<Top/binary, LocationBin/binary, Bottom/binary>>,
    Req:respond({301,
                 [{"Location", Location},
                  {"Content-Type", "text/html"} | ExtraHeaders],
                 Body}).

reply_json(Req, Body) ->
    Req:ok({"application/json",
            server_header(),
            mochijson2:encode(Body)}).

reply_json(Req, Body, Status) ->
    Req:respond({Status,
                 [{"Content-Type", "application/json"}
                  | server_header()],
                 mochijson2:encode(Body)}).

expect_config(Key) ->
    {value, RV} = ns_config:search(Key),
    RV.

expect_prop_value(K, List) ->
    Ref = make_ref(),
    try
        case proplists:get_value(K, List, Ref) of
            RV when RV =/= Ref -> RV
        end
    catch
        error:X -> erlang:error(X, [K, List])
    end.

direct_port(Node) ->
    case ns_port_server:get_port_server_param(ns_config:get(),
                                              memcached, "-p",
                                              Node) of
        false ->
            ns_log:log(?MODULE, 0003, "missing memcached port in confirguration for node ~p (as seen on node ~p)", [Node, node()]),
            false;
        {value, MemcachedPortStr} ->
            {value, list_to_integer(MemcachedPortStr)}
    end.

%% milliseconds since 1970 Jan 1 at UTC
java_date() ->
    {MegaSec, Sec, Micros} = erlang:now(),
    (MegaSec * 1000000 + Sec) * 1000 + (Micros div 1000).

string_hash(String) ->
    lists:foldl((fun (Val, Acc) -> (Acc * 31 + Val) band 16#0fffffff end),
                0,
                String).

my_seed(Number) ->
    {Number*31, Number*13, Number*113}.

%% applies F to every InList element and current state.
%% F must return pair of {new list element value, new current state}.
%% returns pair of {new list, current state}
full_stateful_map(F, InState, InList) ->
    {RV, State} = full_stateful_map_rec(F, InState, InList, []),
    {lists:reverse(RV), State}.

full_stateful_map_rec(_F, State, [], Acc) ->
    {Acc, State};
full_stateful_map_rec(F, State, [H|Tail], Acc) ->
    {Value, NewState} = F(H, State),
    full_stateful_map_rec(F, NewState, Tail, [Value|Acc]).

%% same as full_stateful_map/3, but discards state and returns only transformed list
stateful_map(F, InState, InList) ->
    element(1, full_stateful_map(F, InState, InList)).

low_pass_filter(Alpha, List) ->
    Beta = 1 - Alpha,
    F = fun (V, Prev) ->
                RV = Alpha*V + Beta*Prev,
                {RV, RV}
        end,
    case List of
        [] -> [];
        [H|Tail] -> [H | stateful_map(F, H, Tail)]
    end.

caching_result(Key, Computation) ->
    case call_simple_cache(lookup, [Key]) of
        [] -> begin
                  V = Computation(),
                  call_simple_cache(insert, [{Key, V}]),
                  V
              end;
        [{_, V}] -> V
    end.

-ifdef(EUNIT).

string_hash_test_() ->
    [
     ?_assert(string_hash("hello1") /= string_hash("hi")),
     ?_assert(string_hash("hi") == ($h*31+$i))
    ].

wrap_tests_with_cache_setup(Tests) ->
    {spawn, {setup,
             fun () ->
                     simple_cache:start_link()
             end,
             fun (_) ->
                     exit(whereis(simple_cache), die)
             end,
             Tests}}.

debugger_apply(Fun, Args) ->
    i:im(),
    {module, _} = i:ii(?MODULE),
    i:iaa([break]),
    ok = i:ib(?MODULE, Fun, length(Args)),
    apply(?MODULE, Fun, Args).

test_under_debugger() ->
    i:im(),
    {module, _} = i:ii(?MODULE),
    i:iaa([init]),
    eunit:test({spawn, {timeout, infinity, {module, ?MODULE}}}, [verbose]).

-endif.

get_option(Option, Options) ->
    {proplists:get_value(Option, Options),
     proplists:delete(Option, Options)}.

stateful_takewhile_rec(_F, [], _State, App) ->
    App;
stateful_takewhile_rec(F, [H|Tail], State, App) ->
    case F(H, State) of
        {true, NewState} ->
            stateful_takewhile_rec(F, Tail, NewState, [H|App]);
        _ -> App
    end.

stateful_takewhile(F, List, State) ->
    lists:reverse(stateful_takewhile_rec(F, List, State, [])).

parse_json(Req) ->
    mochijson2:decode(Req:recv_body()).

parse_boolean(Value) ->
    case Value of
        true -> true;
        false -> false;
        <<"true">> -> true;
        <<"false">> -> false;
        <<"1">> -> true;
        <<"0">> -> false;
        1 -> true;
        0 -> false
    end.

concat_url_path(Segments) ->
    "/" ++ string:join(lists:map(fun mochiweb_util:quote_plus/1, Segments), "/").

%% this regexps are produced by code from http://code.iamcal.com/php/rfc822/rfc3696.phps
rfc3698_regexps() ->
    AddrSpecSrc = "\\A(((?:(?:(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29))*(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29)|(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))))?(?:(?:[\\x41-\\x5a\\x61-\\x7a]|[\\x30-\\x39]|[\\x21\\x23-\\x27\\x2a\\x2b\\x2d\\x2f\\x3d\\x3f\\x5e\\x5f\\x60\\x7b-\\x7e])+(?:\\x2e(?:[\\x41-\\x5a\\x61-\\x7a]|[\\x30-\\x39]|[\\x21\\x23-\\x27\\x2a\\x2b\\x2d\\x2f\\x3d\\x3f\\x5e\\x5f\\x60\\x7b-\\x7e])+)*)(?:(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29))*(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29)|(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))))?))|((?:(?:(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29))*(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29)|(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))))?\\x22(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21\\x23-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))+(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x22(?:(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29))*(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29)|(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))))?))|((?:(?:(?:(?:(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29))*(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29)|(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))))?(?:(?:[\\x41-\\x5a\\x61-\\x7a]|[\\x30-\\x39]|[\\x21\\x23-\\x27\\x2a\\x2b\\x2d\\x2f\\x3d\\x3f\\x5e\\x5f\\x60\\x7b-\\x7e]))+(?:(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29))*(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29)|(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))))?)|(?:(?:(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29))*(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29)|(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))))?\\x22(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21\\x23-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))+(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x22(?:(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29))*(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29)|(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))))?))(?:\\x2e(?:(?:(?:(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29))*(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29)|(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))))?(?:(?:[\\x41-\\x5a\\x61-\\x7a]|[\\x30-\\x39]|[\\x21\\x23-\\x27\\x2a\\x2b\\x2d\\x2f\\x3d\\x3f\\x5e\\x5f\\x60\\x7b-\\x7e]))+(?:(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29))*(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29)|(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))))?)|(?:(?:(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29))*(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29)|(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))))?\\x22(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21\\x23-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))+(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x22(?:(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29))*(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29)|(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))))?)))*)))\\x40(((?:(?:(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29))*(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29)|(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))))?(?:(?:[\\x41-\\x5a\\x61-\\x7a]|[\\x30-\\x39]|[\\x21\\x23-\\x27\\x2a\\x2b\\x2d\\x2f\\x3d\\x3f\\x5e\\x5f\\x60\\x7b-\\x7e])+(?:\\x2e(?:[\\x41-\\x5a\\x61-\\x7a]|[\\x30-\\x39]|[\\x21\\x23-\\x27\\x2a\\x2b\\x2d\\x2f\\x3d\\x3f\\x5e\\x5f\\x60\\x7b-\\x7e])+)*)(?:(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29))*(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29)|(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))))?))|((?:(?:(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29))*(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29)|(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))))?\\x5b(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x5a\\x5e-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x5d(?:(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29))*(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29)|(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))))?))|((?:(?:(?:(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29))*(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29)|(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))))?(?:(?:[\\x41-\\x5a\\x61-\\x7a]|[\\x30-\\x39]|[\\x21\\x23-\\x27\\x2a\\x2b\\x2d\\x2f\\x3d\\x3f\\x5e\\x5f\\x60\\x7b-\\x7e]))+(?:(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29))*(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29)|(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))))?)(?:\\x2e(?:(?:(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29))*(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29)|(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))))?(?:(?:[\\x41-\\x5a\\x61-\\x7a]|[\\x30-\\x39]|[\\x21\\x23-\\x27\\x2a\\x2b\\x2d\\x2f\\x3d\\x3f\\x5e\\x5f\\x60\\x7b-\\x7e]))+(?:(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29))*(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29)|(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))))?))*)))\\z",
    {ok, AddrSpec} = re:compile(AddrSpecSrc),

    OuterCommentSrc = "(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f])))*(?:(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:\\x28(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f]))))*(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29))(?:(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])|(?:\\x5c(?:\\x0a*\\x0d*[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]\\x0a*\\x0d*)|(?:\\x5c[\\x00-\\x7f])))*)+(?:(?:(?:[\\x20\\x09]*(?:\\x0d\\x0a))?[\\x20\\x09]+)|(?:[\\x20\\x09]+(?:(?:\\x0d\\x0a)[\\x20\\x09]+)*))?\\x29)",
    {ok, OuterComment} = re:compile(OuterCommentSrc),

    {AddrSpec, OuterComment}.

replace_contiuosly(Str, RE, For) ->
    Res = re:replace(Str, RE, For, [{return, list}]),
    if
        Res =:= Str -> Str;
        true -> replace_contiuosly(Res, RE, For)
    end.

% the validation RE is taken from
% http://code.iamcal.com/php/rfc822/rfc3696.phps but other steps (for
% example, validation of domain name part) are omitted for simplicity.
%
% Also byte-for-byte translation is not possible due to unsuitable
% license of that code.
%
% We should be clear licence-wide, 'cause original code builds regexp
% source at runtime and we took that result, not the original code.
validate_email_address(Email) ->
    %% see http://www.dominicsayers.com/isemail/ for details
    case string:len(Email) =< 256 of
        false -> false;
        true ->
            {AddrSpec, OuterComment} = rfc3698_regexps(),

            EmailNoComments = replace_contiuosly(Email, OuterComment, "(x)"),
            Match = re:run(EmailNoComments, AddrSpec),

            case Match of
                {match, _} -> true;
                _ -> false
            end
    end.

-ifdef(EUNIT).

validate_email_address_test_() ->
    [
     ?_assert(validate_email_address("alk@tut.by") == true),
     ?_assert(validate_email_address("asd@asd@asd") == false)
    ].

%% the test data is from:
%% http://isemail.googlecode.com/svn/trunk/tests/tests.xml
%%
%% some tests don't pass 'cause we are not strict enough
%% w.r.t. length and domain names
validate_email_address_mass_test() ->
    Data = [["first.last@example.com", true],
            ["1234567890123456789012345678901234567890123456789012345678901234@example.com",
             true],
            ["first.last@sub.do,com", false],
            ["\"first\\\"last\"@example.com", true],
            ["first\\@last@example.com", false],
            ["\"first@last\"@example.com", true],
            ["\"first\\\\last\"@example.com", true],
            ["x@x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x234",
             true],
            ["123456789012345678901234567890123456789012345678901234567890@12345678901234567890123456789012345678901234567890123456789.12345678901234567890123456789012345678901234567890123456789.123456789012345678901234567890123456789012345678901234567890123.example.com",
             true],
            ["first.last@[12.34.56.78]", true],
            ["first.last@[IPv6:::12.34.56.78]", true],
            ["first.last@[IPv6:1111:2222:3333::4444:12.34.56.78]", true],
            ["first.last@[IPv6:1111:2222:3333:4444:5555:6666:12.34.56.78]", true],
            ["first.last@[IPv6:::1111:2222:3333:4444:5555:6666]", true],
            ["first.last@[IPv6:1111:2222:3333::4444:5555:6666]", true],
            ["first.last@[IPv6:1111:2222:3333:4444:5555:6666::]", true],
            ["first.last@[IPv6:1111:2222:3333:4444:5555:6666:7777:8888]", true],
            ["first.last@x23456789012345678901234567890123456789012345678901234567890123.example.com",
             true],
            ["first.last@1xample.com", true],
            ["first.last@123.example.com", true],
            ["123456789012345678901234567890123456789012345678901234567890@12345678901234567890123456789012345678901234567890123456789.12345678901234567890123456789012345678901234567890123456789.12345678901234567890123456789012345678901234567890123456789.1234.example.com",
             false],
            ["first.last", false],
            %% ["12345678901234567890123456789012345678901234567890123456789012345@example.com",
            %%  false],
            [".first.last@example.com", false],
            ["first.last.@example.com", false],
            ["first..last@example.com", false],
            ["\"first\"last\"@example.com", false],
            ["\"first\\last\"@example.com", true],
            ["\"\"\"@example.com", false],
            ["\"\\\"@example.com", false],
            ["\"\"@example.com", false],
            ["first\\\\@last@example.com", false],
            ["first.last@", false],
            ["x@x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456",
             false],
            %% ["first.last@[.12.34.56.78]", false],
            %% ["first.last@[12.34.56.789]", false],
            %% ["first.last@[::12.34.56.78]", false],
            %% ["first.last@[IPv5:::12.34.56.78]", false],
            %% ["first.last@[IPv6:1111:2222:3333::4444:5555:12.34.56.78]", false],
            %% ["first.last@[IPv6:1111:2222:3333:4444:5555:12.34.56.78]", false],
            %% ["first.last@[IPv6:1111:2222:3333:4444:5555:6666:7777:12.34.56.78]", false],
            %% ["first.last@[IPv6:1111:2222:3333:4444:5555:6666:7777]", false],
            %% ["first.last@[IPv6:1111:2222:3333:4444:5555:6666:7777:8888:9999]", false],
            %% ["first.last@[IPv6:1111:2222::3333::4444:5555:6666]", false],
            %% ["first.last@[IPv6:1111:2222:3333::4444:5555:6666:7777]", false],
            %% ["first.last@[IPv6:1111:2222:333x::4444:5555]", false],
            %% ["first.last@[IPv6:1111:2222:33333::4444:5555]", false],

            %% ["first.last@example.123", false],
            %% ["first.last@com", false],
            %% ["first.last@-xample.com", false],
            %% ["first.last@exampl-.com", false],

            %% ["first.last@x234567890123456789012345678901234567890123456789012345678901234.example.com",
            %%  false],
            ["\"Abc\\@def\"@example.com", true],
            ["\"Fred\\ Bloggs\"@example.com", true],
            ["\"Joe.\\\\Blow\"@example.com", true],
            ["\"Abc@def\"@example.com", true],
            ["\"Fred Bloggs\"@example.com", true],
            ["user+mailbox@example.com", true],
            ["customer/department=shipping@example.com", true],
            ["$A12345@example.com", true],
            ["!def!xyz%abc@example.com", true],
            ["_somename@example.com", true],
            ["dclo@us.ibm.com", true],
            ["abc\\@def@example.com", false],
            ["abc\\\\@example.com", false],
            ["peter.piper@example.com", true],
            ["Doug\\ \\\"Ace\\\"\\ Lovell@example.com", false],
            ["\"Doug \\\"Ace\\\" L.\"@example.com", true],
            ["abc@def@example.com", false],
            ["abc\\\\@def@example.com", false],
            ["abc\\@example.com", false],
            ["@example.com", false],
            ["doug@", false],
            ["\"qu@example.com", false],
            ["ote\"@example.com", false],
            [".dot@example.com", false],
            ["dot.@example.com", false],
            ["two..dot@example.com", false],
            ["\"Doug \"Ace\" L.\"@example.com", false],
            ["Doug\\ \\\"Ace\\\"\\ L\\.@example.com", false],
            ["hello world@example.com", false],
            ["gatsby@f.sc.ot.t.f.i.tzg.era.l.d.", false],
            ["test@example.com", true],
            ["TEST@example.com", true],
            ["1234567890@example.com", true],
            ["test+test@example.com", true],
            ["test-test@example.com", true],
            ["t*est@example.com", true],
            ["+1~1+@example.com", true],
            ["{_test_}@example.com", true],
            ["\"[[ test ]]\"@example.com", true],
            ["test.test@example.com", true],
            ["\"test.test\"@example.com", true],
            ["test.\"test\"@example.com", true],
            ["\"test@test\"@example.com", true],
            ["test@123.123.123.x123", true],
            %% ["test@123.123.123.123", false],
            ["test@[123.123.123.123]", true],
            ["test@example.example.com", true],
            ["test@example.example.example.com", true],
            ["test.example.com", false],
            ["test.@example.com", false],
            ["test..test@example.com", false],
            [".test@example.com", false],
            ["test@test@example.com", false],
            ["test@@example.com", false],
            ["-- test --@example.com", false],
            ["[test]@example.com", false],
            ["\"test\\test\"@example.com", true],
            ["\"test\"test\"@example.com", false],
            ["()[]\\;:,><@example.com", false],
            ["test@.", false],
            ["test@example.", false],
            ["test@.org", false],
            ["test@123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012.com",
             false],
            %% ["test@example", false],
            ["test@[123.123.123.123", false],
            ["test@123.123.123.123]", false],
            ["NotAnEmail", false],
            ["@NotAnEmail", false],
            ["\"test\\\\blah\"@example.com", true],
            ["\"test\\blah\"@example.com", true],
            ["\"test\\\rblah\"@example.com", true],
            ["\"test\rblah\"@example.com", false],
            ["\"test\\\"blah\"@example.com", true],
            ["\"test\"blah\"@example.com", false],
            ["customer/department@example.com", true],
            ["_Yosemite.Sam@example.com", true],
            ["~@example.com", true],
            [".wooly@example.com", false],
            ["wo..oly@example.com", false],
            ["pootietang.@example.com", false],
            [".@example.com", false],
            ["\"Austin@Powers\"@example.com", true],
            ["Ima.Fool@example.com", true],
            ["\"Ima.Fool\"@example.com", true],
            ["\"Ima Fool\"@example.com", true],
            ["Ima Fool@example.com", false],
            ["phil.h\\@\\@ck@haacked.com", false],
            ["\"first\".\"last\"@example.com", true],
            ["\"first\".middle.\"last\"@example.com", true],
            ["\"first\\\\\"last\"@example.com", false],
            ["\"first\".last@example.com", true],
            ["first.\"last\"@example.com", true],
            ["\"first\".\"middle\".\"last\"@example.com", true],
            ["\"first.middle\".\"last\"@example.com", true],
            ["\"first.middle.last\"@example.com", true],
            ["\"first..last\"@example.com", true],
            %% ["foo@[\\1.2.3.4]", false],
            ["\"first\\\\\\\"last\"@example.com", true],
            ["first.\"mid\\dle\".\"last\"@example.com", true],
            ["Test.\r\n Folding.\r\n Whitespace@example.com", true],
            ["first.\"\".last@example.com", false],
            ["first\\last@example.com", false],
            ["Abc\\@def@example.com", false],
            ["Fred\\ Bloggs@example.com", false],
            ["Joe.\\\\Blow@example.com", false],
            %% ["first.last@[IPv6:1111:2222:3333:4444:5555:6666:12.34.567.89]", false],
            ["\"test\\\r\n blah\"@example.com", false],
            ["\"test\r\n blah\"@example.com", true],
            ["{^c\\@**Dog^}@cartoon.com", false],
            ["(foo)cal(bar)@(baz)iamcal.com(quux)", true],
            ["cal@iamcal(woo).(yay)com", true],
            %% ["\"foo\"(yay)@(hoopla)[1.2.3.4]", false],
            ["cal(woo(yay)hoopla)@iamcal.com", true],
            ["cal(foo\\@bar)@iamcal.com", true],
            ["cal(foo\\)bar)@iamcal.com", true],
            ["cal(foo(bar)@iamcal.com", false],
            ["cal(foo)bar)@iamcal.com", false],
            ["cal(foo\\)@iamcal.com", false],
            ["first().last@example.com", true],
            ["first.(\r\n middle\r\n )last@example.com", true],
            ["first(12345678901234567890123456789012345678901234567890)last@(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)example.com",
             false],
            ["first(Welcome to\r\n the (\"wonderful\" (!)) world\r\n of email)@example.com",
             true],
            ["pete(his account)@silly.test(his host)", true],
            ["c@(Chris's host.)public.example", true],
            ["jdoe@machine(comment).  example", true],
            ["1234   @   local(blah)  .machine .example", true],
            ["first(middle)last@example.com", false],
            ["first(abc.def).last@example.com", true],
            ["first(a\"bc.def).last@example.com", true],
            ["first.(\")middle.last(\")@example.com", true],
            ["first(abc(\"def\".ghi).mno)middle(abc(\"def\".ghi).mno).last@(abc(\"def\".ghi).mno)example(abc(\"def\".ghi).mno).(abc(\"def\".ghi).mno)com(abc(\"def\".ghi).mno)",
             false],
            ["first(abc\\(def)@example.com", true],
            ["first.last@x(1234567890123456789012345678901234567890123456789012345678901234567890).com",
             true],
            ["a(a(b(c)d(e(f))g)h(i)j)@example.com", true],
            ["a(a(b(c)d(e(f))g)(h(i)j)@example.com", false],
            ["name.lastname@domain.com", true],
            %% [".@", false],
            %% ["a@b", false],
            ["@bar.com", false],
            ["@@bar.com", false],
            ["a@bar.com", true],
            ["aaa.com", false],
            %% ["aaa@.com", false],
            %% ["aaa@.123", false],
            ["aaa@[123.123.123.123]", true],
            %% ["aaa@[123.123.123.123]a", false],
            %% ["aaa@[123.123.123.333]", false],
            ["a@bar.com.", false],
            %% ["a@bar", false],
            ["a-b@bar.com", true],
            ["+@b.c", true],
            ["+@b.com", true],
            %% ["a@-b.com", false],
            %% ["a@b-.com", false],
            ["-@..com", false],
            ["-@a..com", false],
            ["a@b.co-foo.uk", true],
            ["\"hello my name is\"@stutter.com", true],
            ["\"Test \\\"Fail\\\" Ing\"@example.com", true],
            ["valid@special.museum", true],
            %% ["invalid@special.museum-", false],
            ["shaitan@my-domain.thisisminekthx", true],
            ["test@...........com", false],
            %% ["foobar@192.168.0.1", false],
            ["\"Joe\\\\Blow\"@example.com", true],
            ["Invalid \\\n Folding \\\n Whitespace@example.com", false],
            ["HM2Kinsists@(that comments are allowed)this.is.ok", true],
            ["user%uucp!path@somehost.edu", true],
            ["\"first(last)\"@example.com", true],
            [" \r\n (\r\n x \r\n ) \r\n first\r\n ( \r\n x\r\n ) \r\n .\r\n ( \r\n x) \r\n last \r\n (  x \r\n ) \r\n @example.com",
             true],
            ["test. \r\n \r\n obs@syntax.com", true],
            ["test. \r\n \r\n obs@syntax.com", true],
            ["test.\r\n\r\n obs@syntax.com", false],
            ["\"null \\\\0\"@char.com", true],
            %% ["\"null \\0\"@char.com", false],
            ["null\\\\0@char.com", false],
            ["cdburgess+!\#$%&'*-/=?+_{}|~test@gmail.com", true]],
    BadCases = lists:filter(fun ([Address, Expected]) ->
                                    Expected =/= validate_email_address(Address)
                            end, Data),

    ?assertEqual([], BadCases).

-endif.
